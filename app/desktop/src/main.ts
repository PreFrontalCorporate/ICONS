import { app, BrowserWindow, ipcMain, globalShortcut, shell, dialog } from 'electron';
import * as path from 'node:path';
import { format as formatUrl } from 'node:url';

let mainWin: BrowserWindow | null = null;
const overlays = new Set<BrowserWindow>();

function sendOverlayCount() {
  const n = overlays.size;
  BrowserWindow.getAllWindows().forEach(w => w.webContents.send('overlay:count', n));
}

function overlayHtmlPath() {
  return path.join(app.getAppPath(), 'windows', 'overlay.html');
}

function createOverlay(imageUrl: string) {
  const win = new BrowserWindow({
    width: 480,
    height: 480,
    frame: false,
    transparent: true,
    resizable: true,
    movable: true,
    alwaysOnTop: true,
    skipTaskbar: true,
    hasShadow: false,
    focusable: true,
    webPreferences: {
      preload: path.join(app.getAppPath(), 'windows', 'overlay-preload.js'),
      sandbox: false,
    },
  });

  win.on('closed', () => { overlays.delete(win); sendOverlayCount(); });
  win.loadFile(overlayHtmlPath(), { hash: encodeURIComponent(imageUrl) });
  overlays.add(win);
  sendOverlayCount();
  return win;
}

async function createWindow() {
  const isPackaged = app.isPackaged;
  // In a packaged app, `__dirname` points to the `dist` folder inside `app.asar`.
  // In development, `__dirname` is `app/desktop/dist`.
  // This is a reliable base for preload scripts and other assets.
  const distPath = __dirname;

  mainWin = new BrowserWindow({
    width: 1200,
    height: 800,
    show: false, // Defer showing the window until it's ready
    webPreferences: {
      // Use a __dirname-relative path for the preload script. This is more
      // robust than relying on the CWD.
      preload: path.join(distPath, 'preload.cjs'),
      webviewTag: true,              // <—— important: allow <webview>
      sandbox: false,
    },
  });

  mainWin.on('closed', () => { mainWin = null; });

  // Show the window gracefully when the content is ready.
  mainWin.once('ready-to-show', () => {
    mainWin?.show();
  });

  try {
    // In development, keep loading the static `library.html` to avoid breaking
    // the existing workflow. In production, load the actual Vite build output.
    if (isPackaged) {
      // Production: load the file generated by Vite.
      // The path is relative to the `dist` directory. Using `loadURL` with a
      // `file://` protocol is more robust for packaged apps.
      await mainWin.loadURL(formatUrl({
        pathname: path.join(distPath, 'renderer/index.html'),
        protocol: 'file:',
        slashes: true,
      }));
    } else {
      // Development: load the old wrapper
      await mainWin.loadFile(path.join(app.getAppPath(), 'windows', 'library.html'));
    }
  } catch (error) {
    console.error('Failed to load window content:', error);
    const message = error instanceof Error ? error.message : String(error);
    dialog.showErrorBox(
      'Application Error',
      'Could not load application content. The application will now close.\n\n' + message
    );
    app.quit();
    return;
  }


  const toggle = () => mainWin?.webContents.send('overlay:panel/toggle');
  globalShortcut.register('CommandOrControl+Shift+O', toggle);
  globalShortcut.register('CommandOrControl+Shift+0', toggle);
  globalShortcut.register('CommandOrControl+Shift+Backspace', () => {
    for (const w of [...overlays]) w.close();
    sendOverlayCount();
  });
}

app.whenReady().then(() => {
  createWindow().catch(e => {
    console.error('Failed to create window:', e);
    const message = e instanceof Error ? e.message : String(e);
    dialog.showErrorBox(
      'Startup Error',
      'A critical error occurred during startup. The application will now close.\n\n' + message
    );
    app.quit();
  });
});

app.on('window-all-closed', () => {
  // On macOS it is common for applications and their menu bar
  // to stay active until the user quits explicitly with Cmd + Q
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On macOS it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (mainWin === null) {
    createWindow().catch(e => {
      console.error('Failed to re-create window on activate:', e);
    });
  }
});

app.on('will-quit', () => globalShortcut.unregisterAll());

// IPC endpoints used by preload + overlay windows
ipcMain.handle('overlay/pin', (_e, url: string) => { createOverlay(url); return overlays.size; });
ipcMain.handle('overlay/count', () => overlays.size);
ipcMain.handle('overlay/clearAll', () => { for (const w of [...overlays]) w.close(); return overlays.size; });
ipcMain.handle('overlay/closeSelf', (e) => {
  const win = BrowserWindow.fromWebContents(e.sender);
  if (win && overlays.has(win)) win.close();
});
ipcMain.handle('app/openExternal', (_e, url:string) => shell.openExternal(url));